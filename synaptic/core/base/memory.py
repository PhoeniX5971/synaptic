from typing import List
from ..tool import ToolCall


class Memory:
    """
    Base memory object for storing conversational turns.
    Attributes:
        message: str
            The textual content of the memory
        created: datetime | any
            Timestamp or marker when the memory was created
        role: str
            Role of the speaker: 'user', 'assistant', 'system'
    """

    def __init__(self, message: str, created, role: str):
        self.message = message
        self.created = created
        self.role = role

    def __repr__(self):
        return (
            f"<Memory role={self.role} message={self.message!r} created={self.created}>"
        )


class ResponseMem(Memory):
    """
    Specialized Memory subclass for assistant responses.
    Extends Memory to include:
        - tool_calls: list of ToolCall objects generated by the model
        - tool_results: list of execution results
    """

    def __init__(
        self,
        message: str,
        created,
        tool_calls: List[ToolCall],
        tool_results=[],
        role="assistant",
    ):
        super().__init__(message, created, role)
        self.tool_calls = tool_calls
        self.tool_results = tool_results

    def list_tool_calls(self):
        """
        Returns a list of tool names called by the model.
        """
        return [tool_call.name for tool_call in self.tool_calls]

    def get_tool_call(self, name: str) -> ToolCall:
        """
        Retrieve the first ToolCall matching the given tool name.
        Raises IndexError if not found.
        """
        matching_tool_calls = [tc for tc in self.tool_calls if tc.name == name]
        return matching_tool_calls[0]

    def __repr__(self):
        return f"<Memory role={self.role} message={self.message!r} created={self.created} tool_calls={self.tool_calls} tool_results={self.tool_results}>"


class UserMem(Memory):
    """
    Specialized Memory subclass for user messages.
    Defaults role to 'user'.
    """

    def __init__(self, message: str, created, role="user"):
        super().__init__(message, created, role)

    def __repr__(self):
        return (
            f"<Memory role={self.role} message={self.message!r} created={self.created}>"
        )


class History:
    """
    Conversation history manager.
    Stores a rolling window of Memory objects (user/system/assistant).
    """

    def __init__(self, memoryList: List[Memory] = [], size: int = 10):
        self.MemoryList: list[Memory] = memoryList
        self.size = size

    def _size_update(self):
        """
        Ensure history size does not exceed self.size.
        Pops oldest memory when limit is reached.
        """
        if len(self.MemoryList) > self.size:
            self.MemoryList.pop(0)

    def window(self, size: int) -> list[Memory]:
        """
        Modify and apply the history window size.
        Returns updated MemoryList.
        """
        self.size = size
        self._size_update()
        return self.MemoryList

    def add(self, memory: Memory) -> None:
        """
        Add a Memory object to history and enforce size limit.
        """
        self.MemoryList.append(memory)
        self._size_update()
